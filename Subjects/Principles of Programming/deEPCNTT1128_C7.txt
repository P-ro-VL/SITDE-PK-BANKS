What is the syntax to get the value of a variable x pointed to by the pointer a<br>
*a<br>
a<br>
&a<br>
value(a)<br>
a<br>

The syntax to access the address of the first element of the array arr is<br>
*arr<br>
arr<br>
$arr<br>
arr[0]<br>
b<br>

The syntax to check whether a pointer contains an address is<br>
Compare with -1<br>
Compare with NULL<br>
Compare with 0<br>
Compare with 1<br>
b<br>

What is one of the reasons for using pointers?<br>
Pointers allow different functions to share and modify variables<br>
Save memory<br>
Safe, no memory leaks<br>
Fast, accurate operation define<br>
a<br>

The syntax to access the value of the first element of the array arr is<br>
*arr<br>
&arr<br>
arr[1]<br>
arr <br>
a<br>

What is the correct syntax to declare a pointer to an integer?<br>
int &x;<br>
int &x<br>
int *x;<br>
pointer x;<br>
c<br>

What is a pointer?<br>
A variable that stores an address<br>
The value of an expression<br>
A variable that stores a value<br>
The location of data on a disk<br>
a<br>

The -- operator when used with array addresses:<br>
To move to the address of the next element of the array<br>
Does not make sense<br>
To move to the address of the previous element of the array<br>
To decrement the address of array goes by 1 unit<br>
c<br>

The syntax to access the address of the array arr is<br>
&arr<br>
$arr<br>
arr <br>
*arr<br>
c<br>

The syntax to access the value of the second element of the array arr:<br>
*arr + 1<br>
arr[2]<br>
arr[0]<br>
*(arr + 1)<br>
d<br>

Which is the correct syntax to declare a pointer to a 2-dimensional array?<br>
int *ptr = &num;<br>

int *ptr = num[0][0];<br>

int ptr = &num[0][0];<br>
int *ptr = &num[0][0];<br>
d<br>

Which is the correct syntax to declare a pointer to 1 dimensional array?<br>

int ptr = &num[0];<br>
int *ptr = &num;<br>
int *ptr = num[0];<br>

int *ptr = &num[0];<br>
d<br>

The operator to get the address of a variable is:<br>
&amp;<br>
*<br>
add<br>
address<br>
a<br>

The following statement: int *func( ) { }<br>
Declare a function that returns an integer value<br>
Declare a function that returns a pointer<br>
Error occurred during compilation<br>
Re-declare the multiplication operator<br>
b<br>

What is the syntax for the pointer p to point to an array a?<br>
p=a;<br>
p=*a;<br>
p=a[0];<br>
p=&a;<br>
a<br>

The value of a pointer is:<br>
The address the pointer points to<br>
The value of the variable the pointer is pointing to<br>
The address of the pointer variable itself<br>
A random value<br>
a<br>

The ++ operator when used with array addresses:<br>
To move to the address of the previous element of the array<br>
To increment the address of the array by 1<br>
To move to the address of the next element of the array<br>
It doesn't make sense<br>
c<br>

What is the syntax to get the address of a variable x?<br>
&a<br>
*x<br>
&x<br>
address(a)<br>
c<br>

If a pointer point to a structure, to access the properties of that structure use the operator<br>
Operator -><br>
Operator.<br>
Operator &<br>
Operator *<br>
a<br>

To print the second character of the string str, you can write:<br>
printf("%c", *str+1);<br>
printf("%c",str[2]);<br>
printf("%c",*(str+1));<br>
printf("%d",str[1]);<br>
c<br>

Please indicate the result when running the program:{br}{code}cpp
#include <stdio.h>
int main()
{
int arr[] = {1, 2, 3, 4, 5};
int *p = arr;
++*p;
p += 2;
printf("%d", *p);
return 0;
}<br>
1<br>
4<br>
3<br>
2<br>
c<br>

Please tell me the result when running the program:{br}{code}cpp
#include <stdio.h>
int main()
{
char arr[10] = "Mango", *ptr;
ptr = &arr[1];
printf("%s",ptr++);
return 0;
}<br>
ngo<br>
Compilation error<br>
Mango<br>
ango<br>
d<br>

Please tell me the output of the following program:{br}{code}cpp
#include <stdio.h>
void fun(int *ptr)
{
*ptr = 30;
}
int main()
{
int y = 20;
fun(&y);
printf("%d", y);
return 0;
}<br>
Compilation error<br>
20<br>
30<br>
Error when running the program<br>
c<br>

Assume int uses 4 bytes, char uses 1 byte, float uses 4 bytes, pointer uses 4 bytes to store the address. Please give the result printed on the screen:{br}{code}cpp
#include <stdio.h>
void main()
{
char *pChar;
int *pInt;
float *pFloat;
printf("%d %d %d", sizeof(pChar), sizeof(pInt), sizeof(pFloat));
}<br>
1 4 4<br>
4 4 4<br>
1 4 1<br>
4 1 4<br>
b<br>

Please tell me the result displayed on the screen:{br}{code}cpp
#include <stdio.h>
void main()
{
int a[]={1,2,33,4,4,6};
int *p;
p=a;
printf("%d",*(p+2));
}<br>
2<br>
1<br>
33<br>
4<br>
c<br>

Please tell me the result displayed on the screen:{br}{code}cpp
#include <stdio.h>
void main()
{
int a[]={1,2,33,4,4,6};
int *p;
p=a;
printf("%d",*(p+2));
}<br>
The program reports an error<br>
33<br>
2<br>
An address value<br>
b<br>

Please indicate the result displayed on the screen:{br}{code}cpp
#include <stdio.h>
void main()
{
char *p="Welcome to NEU";
printf("%s",p+8);
}<br>
Welcome to NEU<br>
NEU<br>
8<br>
to NEU<br>
d<br>

Please indicate the result when running the program:{br}{code}cpp
#include <stdio.h>
int main(){
char *ptr = "GeeksQuiz";
printf("%c", *&*ptr);
return 0;
}<br>
G<br>
GeeksQuiz<br>
Compile Error<br>
Address Value<br>
a<br>

Please indicate the result displayed on the screen:{br}{code}cpp
#include <stdio.h>
void f(int *p, int *q){
p = q;
*p = 2;
}
int main(){
int i = 0, j = 1;
f(&i, &j);
printf("%d %d", i, j);
return 0;
}<br>
2 0<br>
0 1<br>
0 2<br>
1 0<br>
c<br>

Please tell me the result when running the program:{br}{code}cpp
#include <stdio.h>
int main()
{
char arr[10] = "Mango", *ptr;
ptr = &arr[1];
printf("%s",++ptr);
return 0;
}<br>
The program reports an error when running<br>
ango<br>
Mango<br>
ngo<br>
d<br>

Please tell me the result when running the program:{br}{code}cpp
#include <stdio.h>
void f(int *p, int *q){
int temp;
temp = *p;
*p = *q;
*q = temp;
}
int main(){
int i = 0, j = 1;
f(&i, &j);
printf("%d %d", i, j);
return 0;
}<br>
1 1<br>
1 0<br>
0 1<br>
0 0<br>
b<br>

Please tell me the result displayed on the screen:{br}{code}cpp
#include <stdio.h>
void main()
{
int a[]={1,2,33,4,4,6};
int *p;
p=a;
printf("%d",p);
}<br>
1<br>
The program reports an error<br>
0<br>
Address of the array a<br>
d<br>

Please tell me the result when running:{br}{code}cpp
#include <stdio.h>
void f(int *p, int *q){
*p = *q;
}
int main(){

int i = 0, j = 1;
f(&i, &j);
printf("%d %d", i, j);
return 0;
}<br>
1 1<br>
1 0<br>
1 0<br>
0 1<br>
a<br>

Please tell me the result displayed on the screen:{br}{code}cpp
#include <stdio.h>
void main()
{
int const *p = 5;
printf("%d", ++(*p));
}<br>
6<br>
An error message<br>
5<br>
An address<br>
b<br>

Please tell me the result of the program:{br}{code}cpp
#include <stdio.h>
void f(int *p, int *q){
p = q;
}
int main(){
int i = 0, j = 1;
f(&i, &j);
printf("%d %d", i, j); 
return 0;
}<br>
1 1<br>
0 0<br>
1 0<br>
0 1<br>
d<br>

Please provide the result:{br}{code}cpp
#include <stdio.h>
struct video { 
char name[50]; 
int rankings;
};
int main() { 
struct video cats = {"CatVid", 53}; 
struct video *ptr; 
ptr = &cats; 
printf("%s", ptr.name);
}<br>
Running Error<br>
CatVid<br>
Compilation Error<br>
53<br>
c<br>

Please provide the result:{br}{code}cpp
#include <stdio.h>
struct video {
char name[50];
int ranking;
};
int main() {
struct video cats = {"CatVid", 53};
struct video *ptr;
ptr = &cats;
printf("%s", ptr->name);
}<br>
Running Error<br>
CatVid<br>
Compilation Error<br>
53<br>
b<br>

Please indicate the result displayed on the screen:{br}{code}cpp
#include <stdio.h>
void printxy(int x, int y)
{
int *ptr;
x = 0;
ptr = &x;
y = *ptr;
*ptr = 1;
printf("%d,%d", x, y);
}
int main()
{
printxy(1,1);
return 0;
}<br>
0,1<br>
0,0<br>
1,1<br>
1,0<br>
d<br>

Please indicate the result displayed on the screen:{br}{code}cpp
#include <stdio.h>
int arr[] = {1,2,3};
main()
{
int *ptr;
ptr = arr;
ptr++;
printf("%d, %d",*ptr, *(ptr+1));
}<br>
1,2<br>
3,2<br>
1,2,3<br>
2,3<br>
d<br>

Assume array a has address 2000. Show the result displayed on the screen:{br}{code}cpp
#include <stdio.h>
int main()
{
int a[5] = {1, 2, 3, 4, 5};
int *p = a;
printf("%d,%d",p,&a[1]);
}<br>
2000,2004<br>
2000,2<br>
1,2<br>
2000,2000<br>
a<br>

What is the declaration of int **pptr?<br>
Declare a pointer that points to a pointer<br>
Declare a variable containing an integer value<br>
Declare a string<br>
Declare a pointer<br>
a<br>

Choose the FALSE statement when talking about pointers:<br>
Pointers allow more efficient passing of arrays and strings to functions<br>
Pointers reduce processing speed<br>
Pointers reduce the length and complexity of programs<br>
Pointers save memory<br>
b<br>

Choose the MOST CORRECT statement when talking about pointers:<br>
A pointer can point to any object<br>
The value of a pointer is the value of the variable that the pointer point to<br>
A pointer can only point to 1 object of the same type<br>
The address of the pointer is the address of the variable that the pointer points to<br>
c<br>

Suppose there is a declaration:
int i, *p;
p = &i;
Then, p + k means:<br>
Point to the kth integer after i<br>
Increment the value of i by 1<br>
Affect the value of the next integer after i<br>
Point to the next integer after i<br>
a<br>

Suppose there is a declaration:
int i, *p;
p = &i;
Then, p - k means:<br>
Point to the kth integer before i<br>
Decrease the value of i by 1<br>
Affect the value of the integer before i<br>
Point to the integer before i<br>
a<br>

Suppose the declaration:
int i, *p;
p = &i;
Then, ++*p or (*p)++ means:<br>
Point to the kth integer after i<br>
Increase the value of i by 1<br>
Affect the value of the next integer after i<br>
Point to the next integer after i<br>
b<br>

Suppose the declaration:
int i, *p;
p = &i;
Then, *(p++) means:<br>
Point to the kth integer after i<br>
Increase the value of i by 1<br>
Affect the value of the next integer after i<br>
Point to the next integer after i<br>
c<br>

Suppose the declaration:
int i, *p;
p = &i;
Then, ++p or p++ means:<br>
Point to the kth integer after i<br>
Increase the value of i by 1<br>
Affect the value of the next integer after i<br>
Point to the next integer after i<br>
d<br>

Suppose the declaration:
int i, *p;
p = &i;
Then, --p or p-- means:<br>
Point to the kth integer before i<br>
Decrease value of i goes by 1<br>
Affects the value of the integer preceding i<br>
Points to the integer preceding i<br>
d<br>

Fill in the blank (…):
*p++ = *q++ will be equivalent to
…............
p=p+1;
q=q+1;<br>
p=q<br>
*p=*q<br>
*p=q<br>
p=*q<br>
b<br>