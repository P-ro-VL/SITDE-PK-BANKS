Đâu là cú pháp để lấy ra giá trị của một biến x được trỏ bởi con trỏ a<br>
*a<br>
a<br>
&a<br>
value(a)<br>
a<br>

Cú pháp để truy cập đến địa chỉ của phần tử đầu tiên của mảng arr là<br>
*arr<br>
arr<br>
$arr<br>
arr[0]<br>
b<br>

Cú pháp để kiểm tra xem con trỏ có chứa một địa chỉ nào hay không là<br>
So sánh với -1<br>
So sánh với NULL<br>
So sánh với 0<br>
So sánh với 1<br>
b<br>

Một trong các lý do của việc sử dụng con trỏ là gì?<br>
Con trỏ cho phép các hàm khác nhau cùng chia sẻ và thay đổi biến<br>
Tiết kiệm bộ nhớ<br>
An toàn, không bị rò rỉ bộ nhớ<br>
Hoạt động nhanh, chính xác<br>
a<br>

Cú pháp để truy cập đến giá trị của phần tử đầu tiên của mảng arr là<br>
*arr<br>
&arr<br>
arr[1]<br>
arr <br>
a<br>

Đâu là cú pháp đúng để khai báo con trỏ trỏ đến 1 số nguyên?<br>
int &x;<br>
int &x<br>
int *x;<br>
pointer x;<br>
c<br>

Con trỏ là gì?<br>
Biến lưu trữ địa chỉ<br>
Giá trị của một biểu thức<br>
Biến lưu trữ giá trị<br>
Vị trí của dữ liệu trên ổ đĩa<br>
a<br>

Toán tử -- khi dùng với địa chỉ mảng:<br>
Để chuyển đến địa chỉ của phần tử tiếp theo của mảng<br>
Sẽ không có ý nghĩa<br>
Để chuyển đến địa chỉ của phần tử trước của mảng<br>
Để giảm địa chỉ của mảng đi 1 đơn vị<br>
c<br>

Cú pháp để truy cập đến địa chỉ của mảng arr là<br>
&arr<br>
$arr<br>
arr <br>
*arr<br>
c<br>

Cú pháp để truy cập đến giá trị của phần tử thứ 2 của mảng arr:<br>
*arr + 1<br>
arr[2]<br>
arr[0]<br>
*(arr  + 1)<br>
d<br>

Đâu là cú pháp đúng khai báo 1 con trỏ trỏ đến 1 mảng 2 chiều?<br>
int *ptr = &num;<br>

int *ptr = num[0][0];<br>

int ptr = &num[0][0];<br>
int *ptr = &num[0][0];<br>
d<br>

Đâu là cú pháp đúng khai báo 1 con trỏ trỏ đến 1 mảng 1 chiều?<br>

int ptr = &num[0];<br>
int *ptr = &num;<br>
int *ptr = num[0];<br>

int *ptr = &num[0];<br>
d<br>

Toán tử để lấy địa chỉ là của một biến là:<br>
&amp;<br>
*<br>
add<br>
address<br>
a<br>

Câu lệnh sau: int *func( ) { }<br>
Khai báo một hàm trả về giá trị nguyên<br>
Khai báo một hàm trả về con trỏ<br>
Xảy ra lỗi khi biên dịch<br>
Khai báo lại toán tử nhân<br>
b<br>

Đâu là cú pháp để con trỏ p trỏ đến mảng a?<br>
p=a;<br>
p=*a;<br>
p=a[0];<br>
p=&a;<br>
a<br>

Giá trị của con trỏ là:<br>
Địa chỉ mà con trỏ trỏ đến<br>
Giá trị của biến nơi con trỏ đang trỏ tới<br>
Địa chỉ của bản thân biến con trỏ đó<br>
Một giá trị ngẫu nhiên<br>
a<br>

Toán tử ++ khi dùng với địa chỉ mảng:<br>
Để chuyển đến địa chỉ của phần tử trước của mảng<br>
Để tăng địa chỉ của mảng lên 1 đơn vị<br>
Để chuyển đến địa chỉ của phần tử tiếp theo của mảng<br>
Sẽ không có  ý nghĩa<br>
c<br>

Đâu là cú pháp để lấy ra địa chỉ của một biến x?<br>
&a<br>
*x<br>
&x<br>
address(a)<br>
c<br>

Nếu một con trỏ trỏ đến một cấu trúc, để truy cập đến các thuộc tính của cấu trúc đó thì sử dụng toán tử<br>
Toán tử -><br>
Toán tử.<br>
Toán tử &<br>
Toán tử *<br>
a<br>

Để in ra ký tự thứ 2 của chuỗi str có thể viết:<br>
printf("%c", *str+1);<br>
printf("%c",str[2]);<br>
printf("%c",*(str+1));<br>
printf("%d",str[1]);<br>
c<br>

Hãy cho biết kết quả khi chạy chương trình:
#include <stdio.h>
int main()
{
    int arr[] = {1, 2, 3, 4, 5};
    int *p = arr;
    ++*p;
    p += 2;
    printf("%d", *p);
    return 0;
}<br>
1<br>
4<br>
3<br>
2<br>
c<br>

Hãy cho biết kết quả khi chạy chương trình:
#include <stdio.h>
int main()
{
    char arr[10] = "Mango", *ptr;
    ptr = &arr[1];
    printf("%s",ptr++);
    return 0;
}<br>
ngo<br>
Lỗi biên dịch<br>
Mango<br>
ango<br>
d<br>

Hãy cho biết đầu ra của chương trình sau:
#include <stdio.h>
void fun(int *ptr)
{
    *ptr = 30;
}
int main()
{
  int y = 20;
  fun(&y);
  printf("%d", y);
  return 0;
}<br>
Lỗi biên dịch<br>
20<br>
30<br>
Lỗi khi chạy chương trình<br>
c<br>

Giả sử int dùng 4 byte, char dùng 1 byte, float dùng 4 byte, con trỏ dùng 4 byte lưu trữ địa chỉ. Hãy cho biết kết quả in ra màn hình:
#include <stdio.h>
void main()
{
    char *pChar;
    int *pInt;
    float *pFloat;
    printf("%d %d %d", sizeof(pChar), sizeof(pInt), sizeof(pFloat));
}<br>
1 4 4<br>
4 4 4<br>
1 4 1<br>
4 1 4<br>
b<br>

Hãy cho biết kết quả hiển thị ra màn hình:
#include <stdio.h>
void main()
{
    int a[]={1,2,33,4,4,6};
    int *p;
    p=a;
    printf("%d",*(p+2));
}<br>
2<br>
1<br>
33<br>
4<br>
c<br>

Hãy cho biết kết quả hiển thị ra màn hình:
#include <stdio.h>
void main()
{
    int a[]={1,2,33,4,4,6};
    int *p;
    p=a;
    printf("%d",*(p+2));
}<br>
Chương trình báo lỗi<br>
11<br>
10<br>
Một giá trị địa chỉ<br>
b<br>

Hãy cho biết kết quả hiển thị ra màn hình:
#include <stdio.h>
void main()
{
    char *p="Welcome to NEU";
    printf("%s",p+8);
}<br>
Welcome to NEU<br>
NEU<br>
8<br>
to NEU<br>
d<br>

Hãy cho biết kết quả khi chạy chương trình:
#include <stdio.h>
int main(){
    char *ptr = "GeeksQuiz";
    printf("%c", *&*ptr);
    return 0;
}<br>
G<br>
GeeksQuiz<br>
Lỗi biên dịch<br>
Giá trị địa chỉ<br>
a<br>

Hãy cho biết kết quả hiển thị ra màn hình:
#include <stdio.h>
void f(int *p, int *q){
    p = q;
    *p = 2;
}
int main(){
    int i = 0, j = 1;
    f(&i, &j);
    printf("%d %d", i, j);
    return 0;
}<br>
2 0<br>
0 1<br>
0 2<br>
1 0<br>
c<br>

Hãy cho biết kết quả khi chạy chương trình:
#include <stdio.h>
int main()
{
    char arr[10] = "Mango", *ptr;
    ptr = &arr[1];
    printf("%s",++ptr);
    return 0;
}<br>
Chương trình báo lỗi khi chạy<br>
ango<br>
Mango<br>
ngo<br>
d<br>

Hãy cho biết kết quả khi chạy chương trình:
#include <stdio.h>
void f(int *p, int *q){
    int temp;
    temp =  *p;
    *p = *q;
    *q = temp;
}
int main(){
    int i = 0, j = 1;
    f(&i, &j);
    printf("%d %d", i, j);
    return 0;
}<br>
1 1<br>
1 0<br>
0 1<br>
0 0<br>
b<br>

Hãy cho biết kết quả hiển thị ra màn hình:
#include <stdio.h>
void main()
{
    int a[]={1,2,33,4,4,6};
    int *p;
    p=a;
    printf("%d",p);
}<br>
1<br>
Chương trình báo lỗi<br>
0<br>
Địa chỉ của mảng a<br>
d<br>

Hãy cho biết kết quả khi chạy:
#include <stdio.h>
void f(int *p, int *q){
    *p = *q;
}
int main(){

    int i = 0, j = 1;
    f(&i, &j);
    printf("%d %d", i, j);
    return 0;
}<br>
1 1<br>
1 0<br>
1 0<br>
0 1<br>
a<br>

Hãy cho biết kết quả hiển thị ra màn hình:
#include <stdio.h>
void main()
{
    int const *p = 5;
    printf("%d", ++(*p));
}<br>
6<br>
Một thông báo lỗi<br>
5<br>
Một địa chỉ<br>
b<br>

Hãy cho biết kết quả chương trình:
#include <stdio.h>
void f(int *p, int *q){
    p = q;
}
int main(){
    int i = 0, j = 1;
    f(&i, &j);
    printf("%d %d", i, j);
    return 0;
}<br>
1 1<br>
0 0<br>
1 0<br>
0 1<br>
d<br>

Hãy cho biết kết quả:
#include <stdio.h>
struct video {
    char name[50];
    int ranking;
};
int main() {
    struct video cats = {"CatVid", 53};
    struct video *ptr;
    ptr = &cats;
    printf("%s", ptr.name);
}<br>
Lỗi khi chạy<br>
CatVid<br>
Lỗi biên dịch<br>
53<br>
c<br>

Hãy cho biết kết quả:
#include <stdio.h>
struct video {
    char name[50];
    int ranking;
};
int main() {
    struct video cats = {"CatVid", 53};
    struct video *ptr;
    ptr = &cats;
    printf("%s", ptr->name);
}<br>
Lỗi khi chạy<br>
CatVid<br>
Lỗi biên dịch<br>
53<br>
b<br>

Hãy cho biết kết quả hiển thị ra màn hình:
#include <stdio.h>
void printxy(int x, int y)
{
    int *ptr;
    x = 0;
    ptr = &x;
    y = *ptr;
    *ptr = 1;
    printf("%d,%d", x, y);
}
int main()
{
   printxy(1,1);
   return 0;
}<br>
0,1<br>
0,0<br>
1,1<br>
1,0<br>
d<br>

Hãy cho biết kết quả hiển thị ra màn hình:
#include <stdio.h>
int arr[] = {1,2,3};
main()
{
    int *ptr;
    ptr = arr;
    ptr++;
    printf("%d, %d",*ptr, *(ptr+1));
}<br>
1,2<br>
3,2<br>
1,2,3<br>
2,3<br>
d<br>

Giả sử mảng a có địa chỉ 2000. Hãy cho biết kết quả hiển thị ra màn hình:
#include <stdio.h>
int main()
{
    int a[5] = {1, 2, 3, 4, 5};
    int *p = a;
    printf("%d,%d",p,&a[1]);
}<br>
2000,2004<br>
2000,2<br>
1,2<br>
2000,2000<br>
a<br>

int **pptr là khai báo gì?<br>
Khai báo con trỏ sẽ trỏ đến con trỏ<br>
Khai báo biến chứa giá trị nguyên<br>
Khai báo một chuỗi<br>
Khai báo con trỏ<br>
a<br>

Chọn khẳng định SAI khi nói về con trỏ:<br>
Con trỏ cho phép truyền mảng và chuỗi tới các hàm hiệu quả hơn<br>
Con trỏ làm giảm tốc độ xử lý<br>
Con trỏ làm giảm độ dài và độ phức tạp của chương trình<br>
Con trỏ tiết kiệm bộ nhớ<br>
b<br>

Chọn khẳng định ĐÚNG NHẤT khi nói về con trỏ:<br>
Một con trỏ có thể trỏ tới bất kì đối tượng nào<br>
Giá trị của con trỏ là giá trị của biến mà con trỏ trỏ đến<br>
Một con trỏ chỉ có thể trỏ tới 1 đối tượng cùng kiểu<br>
Địa chỉ của con trỏ là địa chỉ của biến mà con trỏ trỏ đến<br>
c<br>

Giả sử có khai báo:
int i, *p;
p = &i;
Khi đó, p + k nghĩa là:<br>
Trỏ đến số nguyên thứ k sau i<br>
Tăng giá trị của i lên 1<br>
Tác động đến giá trị của số nguyên kế tiếp sau i<br>
Trỏ đến số nguyên kế tiếp đứng sau i<br>
a<br>

Giả sử có khai báo:
int i, *p;
p = &i;
Khi đó, p - k nghĩa là:<br>
Trỏ đến số nguyên thứ k trước i<br>
Giảm giá trị của i đi 1<br>
Tác động đến giá trị của số nguyên đứng trước i<br>
Trỏ đến số nguyên đứng trước i<br>
a<br>

Giả sử có khai báo:
int i, *p;
p = &i;
Khi đó, ++*p hoặc (*p)++ nghĩa là:<br>
Trỏ đến số nguyên thứ k sau i<br>
Tăng giá trị của i lên 1<br>
Tác động đến giá trị của số nguyên kế tiếp sau i<br>
Trỏ đến số nguyên kế tiếp đứng sau i<br>
b<br>

Giả sử có khai báo:
int i, *p;
p = &i;
Khi đó, *(p++) nghĩa là:<br>
Trỏ đến số nguyên thứ k sau i<br>
Tăng giá trị của i lên 1<br>
Tác động đến giá trị của số nguyên kế tiếp sau i<br>
Trỏ đến số nguyên kế tiếp đứng sau i<br>
c<br>

Giả sử có khai báo:
int i, *p;
p = &i;
Khi đó, ++p hoặc p++ nghĩa là:<br>
Trỏ đến số nguyên thứ k sau i<br>
Tăng giá trị của i lên 1<br>
Tác động đến giá trị của số nguyên kế tiếp sau i<br>
Trỏ đến số nguyên kế tiếp đứng sau i<br>
d<br>

Giả sử có khai báo:
int i, *p;
p = &i;
Khi đó, --p hoặc p-- nghĩa là:<br>
Trỏ đến số nguyên thứ k trước i<br>
Giảm giá trị của i đi 1<br>
Tác động đến giá trị của số nguyên đứng trước i<br>
Trỏ đến số nguyên đứng trước i<br>
d<br>

Điền vào chỗ trống (…):
*p++ = *q++ sẽ tương đương với 
…............
p=p+1;
q=q+1;<br>
p=q<br>
*p=*q<br>
*p=q<br>
p=*q<br>
b<br>


